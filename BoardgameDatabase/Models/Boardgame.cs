// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace BoardgameDatabase
{
    public partial class Boardgame
    {
        #region Properties
        [Key]
        public int Id { get; set; }
        [Required]
        [StringLength(50)]
        public string Name { get; set; }
        [Required]
        [StringLength(50)]
        public string Owner { get; set; }
        [StringLength(50)]
        public string Keeper { get; set; }
        public int MinPlayers { get; set; }
        public int MaxPlayers { get; set; }
        [Column("Tags",TypeName = "text")]
        public string TagText { get; set; }

        public bool ForSale { get; set; }

        [ForeignKey(nameof(Keeper))]
        [InverseProperty(nameof(Adress.BoardgameKeeperNavigations))]
        public virtual Adress KeeperNavigation { get; set; }
        [ForeignKey(nameof(Owner))]
        [InverseProperty(nameof(Adress.BoardgameOwnerNavigations))]
        public virtual Adress OwnerNavigation { get; set; }

        //Code that manages converting tags as text to list and vice versa
        //Commented previous implementation just in case
        [NotMapped]
        public List<string> Tags
        {
            get
            {
                return TagText.Split(',').Select(tg =>tg.Trim()).ToList();
            }
            set
            {
                TagText = String.Join(',', value);

            }
        }

        #endregion
        #region Constructror

        public Boardgame()
        {

        }

        public Boardgame(string name, string owner, string keeper, int minPlayers, int maxPlayers, string tagText, bool forSale)
        {
            Name = name;
            Owner = owner;
            Keeper = keeper;
            MinPlayers = minPlayers;
            MaxPlayers = maxPlayers;
            TagText = tagText;
            ForSale = forSale;
        }

        #endregion
    }
}